rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isLinkOwner(linkId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/links/$(linkId)) &&
        get(/databases/$(database)/documents/links/$(linkId)).data.createdBy == request.auth.uid;
    }

    function isRatingOrLikeUpdate() {
      let allowedFields = ['userRatings', 'averageRating', 'totalRatings', 'likedBy', 'likes'];
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    // Comments
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() &&
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.text is string &&
        request.resource.data.text.size() > 0;
      allow update: if isAuthenticated() && (resource.data.senderId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        isLinkOwner(resource.data.linkId) ||
        isAdmin()
      );
    }

    // Links
    match /links/{linkId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin() ||
        isRatingOrLikeUpdate()
      );
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid || isAdmin()
      );
    }

    // Users
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin();
      // Autoriser l'utilisateur à supprimer son propre document utilisateur (compte)
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Quiz responses
    match /quiz_responses/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow update: if isAuthenticated() && request.auth.uid == userId;
      // Autoriser l'utilisateur à supprimer sa propre réponse de quiz
      allow delete: if isOwner(userId) || isAdmin();
    }
  }
}
